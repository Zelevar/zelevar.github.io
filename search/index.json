[{"content":"В этой статье рассмотрим установку библиотеки SDL на Windows и её использование.\nЧто такое SDL? Simple DirectMedia Layer (SDL) — свободная кроссплатформенная мультимедийная библиотека, реализующая единый программный интерфейс к графической подсистеме, звуковым устройствам и средствам ввода для широкого спектра платформ. Данная библиотека активно используется при написании кроссплатформенных мультимедийных программ (в основном игр).\nЕсли быть кратким - это простая графическая библиотека с самым базовым функционалом. Она доступна под множество различных языков, но в этой статье мы рассмотрим только C++. А сейчас когда у нас есть простое представление о том, что же это такое, мы приступим к установке.\nСкачивание Для начала нам нужно установить библиотеку SDL. Сделать это можно в GitHub репозитории во вкладке с релизами: https://github.com/libsdl-org/SDL/releases. На выбор нам даётся множество версий. Устанавливайте конкретно нужную Вам версию. Если Вам нужна версия для Visual C++ - выбирайте SDL2-devel-VC, если же для MinGW, то SDL2-devel-mingw.\nУстановка Visual C++ Когда Вы уже скачали нужный архив Вам нужно скопировать папки lib и include в любое удобное место. Затем откройте настройки проекта Alt + F7 и перейдите во вкладку Свойства конфигурации \u0026gt; Каталоги VC++. Далее нажимаем на строку Включаемые каталоги и стрелочку рядом с ней, нажимаем \u0026lt;Изменить\u0026hellip;\u0026gt; и добавляем новую строку в которую вводим следующее path\\include, вместо path прописывайте путь до вашей папки с библиотекой SDL, если же она находится в папке проекта, то перед названием папки просто пишите $(ProjectDir), дальше добавляем ещё одну строку и вписываем path\\lib\\x64, также разрядность можете поменять на x86.\nДальше нам нужно сказать линкеру (компоновщику) чтобы он использовал определенные бинарные файлы. Переходим в пункт Компоновщик \u0026gt; Ввод, разворачиваем Дополнительные зависимости и снова нажимаем \u0026lt;Изменить\u0026gt;. Создаем новую строку и вводим туда path\\lib\\x64\\SDL2main.lib, создаем еще одну и прописываем path\\lib\\x64\\SDL2.lib. Как я писал выше Вы должны поменять path на путь папки и также можете изменить разрядность.\nMinGW Если Вы пользуетесь MinGW, и скачали соответствующий архив, Вы должны выбрать определенную архитектуру x86_64-w64-mingw32 или i686-w64-mingw32, выбираем и открываем. Дальше нам нужны 2 папки lib и include, просто скопируйте их в любое удобное место. Дальше нам нужно перейти в папку проекта и просто скомпилировать проект с определенными параметрами, пример:\n1 g++ main.cpp -I path/include -L path/lib/x64 -lSDL2main -lSDL2 Вместо path указывайте путь до вашей папки с библиотекой SDL. Если нужно - меняйте разрядность с x64 на x86. Дальше разберем какой аргумент тут за что отвечает.\n-I позволяет нам просто писать lib.h в заголовках, вместо полного пути до файла. -L немного похож на -I, этим мы говорим компилятору в какой папке искать .lib файлы -l указываем какие .lib файлы использовать Использование Когда библиотека SDL полностью установлена и мы знаем как ее использовать, давайте разберем реальный пример. Также не забудьте поместить SDL2.dll в папку с исполняемым файлом. Этот файл можно найти в папке lib для Visual C++ версии или скачать.\nДопустим мы хотим закрасить каждый четный пиксель в окне. Для этого давайте попробуем рассмотреть такой код:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include \u0026lt;iostream\u0026gt; #include \u0026lt;SDL.h\u0026gt; int main(int argc, char* argv[]) { int width = 640; int height = 480; SDL_Init(SDL_INIT_VIDEO); SDL_Window* window = SDL_CreateWindow( \u0026#34;SDL Window\u0026#34;, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width, height, SDL_WINDOW_SHOWN ); SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED); SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255); for (int i = 0; i \u0026lt; height; i++) { for (int j = 0; j \u0026lt; width; j++) { if (j % 2 == 0) SDL_RenderDrawPoint(renderer, j, i); } } SDL_RenderPresent(renderer); SDL_Event event; bool quit = false; while (!quit) { SDL_PollEvent(\u0026amp;event); if (event.type == SDL_QUIT) quit = true; } // освобождение ресурсов SDL_DestroyRenderer(renderer); SDL_DestroyWindow(window); SDL_Quit(); return 0; } Давайте разберемся что за функции используются у нас в коде. Здесь я дам только описание функций реализовывающих рендеринг. Подробное описание Вы можете найти в документации или на форумах.\nSDL_SetRenderDrawColor установить цвет для рисования. SDL_RenderDrawPoint заполнить пиксель заданным цветом. SDL_RenderPresent отобразить на экране результат. Заключение На этом статья подходит к концу, увидимся в следующих постах :)\n","date":"2023-02-11T00:00:00+03:00","image":"https://zelevar.github.io/p/sdl-installation/cover_hu81334537f2124779282a5b9caeca70a7_332962_120x120_fill_q75_box_smart1.jpg","permalink":"https://zelevar.github.io/p/sdl-installation/","title":"Введение в SDL: Установка"},{"content":"На этом сайте будут публиковаться всяческие гайды по программированию и многое другое. Словом то, что автору придет в голову :)\n","date":"2023-02-10T00:00:00+03:00","image":"https://zelevar.github.io/p/introduction/cover_hua65ef9dffcab5c2422fcd7d846e4bc28_207064_120x120_fill_q75_box_smart1.jpg","permalink":"https://zelevar.github.io/p/introduction/","title":"Вступление"}]